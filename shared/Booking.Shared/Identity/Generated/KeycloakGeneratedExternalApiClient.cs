//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Booking.Shared.Identity.Generated;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Booking.Shared.Identity.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeycloakGeneratedExternalApiClient : IKeycloakGeneratedExternalApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public KeycloakGeneratedExternalApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RealmRepresentation>> RealmsAllAsync(bool? briefRepresentation)
        {
            return RealmsAllAsync(briefRepresentation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RealmRepresentation>> RealmsAllAsync(bool? briefRepresentation, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms"
                    urlBuilder_.Append("admin/realms");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RealmRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import a realm. Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// Realm name must be unique.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmsPOSTAsync(System.IO.Stream body)
        {
            return RealmsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import a realm. Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// Realm name must be unique.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmsPOSTAsync(System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms"
                    urlBuilder_.Append("admin/realms");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the top-level representation of the realm It will not include nested information like User and Client representations.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RealmRepresentation> RealmsGETAsync(string realm)
        {
            return RealmsGETAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the top-level representation of the realm It will not include nested information like User and Client representations.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RealmRepresentation> RealmsGETAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RealmRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
        /// </summary>
        /// <remarks>
        /// This will only update top-level attributes of the realm.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmsPUTAsync(RealmRepresentation body, string realm)
        {
            return RealmsPUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
        /// </summary>
        /// <remarks>
        /// This will only update top-level attributes of the realm.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmsPUTAsync(RealmRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmsDELETEAsync(string realm)
        {
            return RealmsDELETEAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmsDELETEAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get admin events Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <param name="authUser">user id</param>
        /// <param name="dateFrom">From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="dateTo">To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="direction">The direction to sort events by (asc or desc)</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminEventRepresentation>> AdminEventsAllAsync(string authClient, string authIpAddress, string authRealm, string authUser, string dateFrom, string dateTo, string direction, int? first, int? max, System.Collections.Generic.IEnumerable<string> operationTypes, string resourcePath, System.Collections.Generic.IEnumerable<string> resourceTypes, string realm)
        {
            return AdminEventsAllAsync(authClient, authIpAddress, authRealm, authUser, dateFrom, dateTo, direction, first, max, operationTypes, resourcePath, resourceTypes, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get admin events Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <param name="authUser">user id</param>
        /// <param name="dateFrom">From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="dateTo">To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="direction">The direction to sort events by (asc or desc)</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminEventRepresentation>> AdminEventsAllAsync(string authClient, string authIpAddress, string authRealm, string authUser, string dateFrom, string dateTo, string direction, int? first, int? max, System.Collections.Generic.IEnumerable<string> operationTypes, string resourcePath, System.Collections.Generic.IEnumerable<string> resourceTypes, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/admin-events"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/admin-events");
                    urlBuilder_.Append('?');
                    if (authClient != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authClient")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(authClient, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (authIpAddress != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authIpAddress")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(authIpAddress, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (authRealm != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authRealm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(authRealm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (authUser != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authUser")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(authUser, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateTo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateTo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (direction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("direction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (operationTypes != null)
                    {
                        foreach (var item_ in operationTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("operationTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (resourcePath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resourcePath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resourcePath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resourceTypes != null)
                    {
                        foreach (var item_ in resourceTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("resourceTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AdminEventRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminEventsAsync(string realm)
        {
            return AdminEventsAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminEventsAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/admin-events"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/admin-events");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Clear any user login failures for all users This can release temporary disabled users
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersDELETEAsync(string realm)
        {
            return UsersDELETEAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clear any user login failures for all users This can release temporary disabled users
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersDELETEAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/attack-detection/brute-force/users"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attack-detection/brute-force/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get status of a username in brute force detection
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> UsersGETAsync(string userId, string realm)
        {
            return UsersGETAsync(userId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status of a username in brute force detection
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> UsersGETAsync(string userId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/attack-detection/brute-force/users/{userId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attack-detection/brute-force/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Clear any user login failures for the user This can release temporary disabled user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersDELETE2Async(string userId, string realm)
        {
            return UsersDELETE2Async(userId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clear any user login failures for the user This can release temporary disabled user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersDELETE2Async(string userId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/attack-detection/brute-force/users/{userId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attack-detection/brute-force/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authenticator providers Returns a stream of authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> AuthenticatorProvidersAsync(string realm)
        {
            return AuthenticatorProvidersAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator providers Returns a stream of authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> AuthenticatorProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/authenticator-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/authenticator-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client authenticator providers Returns a stream of client authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ClientAuthenticatorProvidersAsync(string realm)
        {
            return ClientAuthenticatorProvidersAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client authenticator providers Returns a stream of client authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ClientAuthenticatorProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/client-authenticator-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/client-authenticator-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create new authenticator configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task ConfigPOSTAsync(AuthenticatorConfigRepresentation body, string realm)
        {
            return ConfigPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create new authenticator configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task ConfigPOSTAsync(AuthenticatorConfigRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authenticator provider's configuration description
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthenticatorConfigInfoRepresentation> ConfigDescriptionAsync(string providerId, string realm)
        {
            return ConfigDescriptionAsync(providerId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator provider's configuration description
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthenticatorConfigInfoRepresentation> ConfigDescriptionAsync(string providerId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/config-description/{providerId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/config-description/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticatorConfigInfoRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGETAsync(string id, string realm)
        {
            return ConfigGETAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/config/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticatorConfigRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigPUTAsync(string id, AuthenticatorConfigRepresentation body, string realm)
        {
            return ConfigPUTAsync(id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigPUTAsync(string id, AuthenticatorConfigRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/config/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigDELETEAsync(string id, string realm)
        {
            return ConfigDELETEAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/config/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExecutionsPOSTAsync(AuthenticationExecutionRepresentation body, string realm)
        {
            return ExecutionsPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExecutionsPOSTAsync(AuthenticationExecutionRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthenticationExecutionRepresentation> ExecutionsGETAsync(string executionId, string realm)
        {
            return ExecutionsGETAsync(executionId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthenticationExecutionRepresentation> ExecutionsGETAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticationExecutionRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete execution
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExecutionsDELETEAsync(string executionId, string realm)
        {
            return ExecutionsDELETEAsync(executionId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete execution
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExecutionsDELETEAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigPOST2Async(string executionId, AuthenticatorConfigRepresentation body, string realm)
        {
            return ConfigPOST2Async(executionId, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigPOST2Async(string executionId, AuthenticatorConfigRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get execution's configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGET2Async(string executionId, string id, string realm)
        {
            return ConfigGET2Async(executionId, id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get execution's configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGET2Async(string executionId, string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}/config/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticatorConfigRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lower execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LowerPriorityAsync(string executionId, string realm)
        {
            return LowerPriorityAsync(executionId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lower execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LowerPriorityAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}/lower-priority"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lower-priority");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Raise execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RaisePriorityAsync(string executionId, string realm)
        {
            return RaisePriorityAsync(executionId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Raise execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RaisePriorityAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (executionId == null)
                throw new System.ArgumentNullException("executionId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/executions/{executionId}/raise-priority"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/executions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/raise-priority");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authentication flows Returns a stream of authentication flows.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationFlowRepresentation>> FlowsAllAsync(string realm)
        {
            return FlowsAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication flows Returns a stream of authentication flows.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationFlowRepresentation>> FlowsAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthenticationFlowRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FlowsPOSTAsync(AuthenticationFlowRepresentation body, string realm)
        {
            return FlowsPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FlowsPOSTAsync(AuthenticationFlowRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object
        /// </summary>
        /// <param name="flowAlias">name of the existing authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CopyAsync(string flowAlias, System.Collections.Generic.IDictionary<string, string> body, string realm)
        {
            return CopyAsync(flowAlias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object
        /// </summary>
        /// <param name="flowAlias">name of the existing authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CopyAsync(string flowAlias, System.Collections.Generic.IDictionary<string, string> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (flowAlias == null)
                throw new System.ArgumentNullException("flowAlias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{flowAlias}/copy"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(flowAlias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/copy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationExecutionInfoRepresentation>> ExecutionsAllAsync(string flowAlias, string realm)
        {
            return ExecutionsAllAsync(flowAlias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationExecutionInfoRepresentation>> ExecutionsAllAsync(string flowAlias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (flowAlias == null)
                throw new System.ArgumentNullException("flowAlias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{flowAlias}/executions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(flowAlias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/executions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthenticationExecutionInfoRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExecutionsPUTAsync(string flowAlias, AuthenticationExecutionInfoRepresentation body, string realm)
        {
            return ExecutionsPUTAsync(flowAlias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExecutionsPUTAsync(string flowAlias, AuthenticationExecutionInfoRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (flowAlias == null)
                throw new System.ArgumentNullException("flowAlias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{flowAlias}/executions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(flowAlias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/executions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExecutionAsync(string flowAlias, System.Collections.Generic.IDictionary<string, object> body, string realm)
        {
            return ExecutionAsync(flowAlias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExecutionAsync(string flowAlias, System.Collections.Generic.IDictionary<string, object> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (flowAlias == null)
                throw new System.ArgumentNullException("flowAlias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(flowAlias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/executions/execution");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FlowAsync(string flowAlias, System.Collections.Generic.IDictionary<string, object> body, string realm)
        {
            return FlowAsync(flowAlias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FlowAsync(string flowAlias, System.Collections.Generic.IDictionary<string, object> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (flowAlias == null)
                throw new System.ArgumentNullException("flowAlias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(flowAlias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/executions/flow");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthenticationFlowRepresentation> FlowsGETAsync(string id, string realm)
        {
            return FlowsGETAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthenticationFlowRepresentation> FlowsGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticationFlowRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FlowsPUTAsync(string id, AuthenticationFlowRepresentation body, string realm)
        {
            return FlowsPUTAsync(id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FlowsPUTAsync(string id, AuthenticationFlowRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FlowsDELETEAsync(string id, string realm)
        {
            return FlowsDELETEAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FlowsDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/flows/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/flows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get form action providers Returns a stream of form action providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormActionProvidersAsync(string realm)
        {
            return FormActionProvidersAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get form action providers Returns a stream of form action providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormActionProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/form-action-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/form-action-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get form providers Returns a stream of form providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormProvidersAsync(string realm)
        {
            return FormProvidersAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get form providers Returns a stream of form providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/form-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/form-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ConfigPropertyRepresentation>>> PerClientConfigDescriptionAsync(string realm)
        {
            return PerClientConfigDescriptionAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ConfigPropertyRepresentation>>> PerClientConfigDescriptionAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/per-client-config-description"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/per-client-config-description");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ConfigPropertyRepresentation>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RegisterRequiredActionAsync(System.Collections.Generic.IDictionary<string, string> body, string realm)
        {
            return RegisterRequiredActionAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RegisterRequiredActionAsync(System.Collections.Generic.IDictionary<string, string> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/register-required-action"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/register-required-action");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get required actions Returns a stream of required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequiredActionProviderRepresentation>> RequiredActionsAllAsync(string realm)
        {
            return RequiredActionsAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get required actions Returns a stream of required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequiredActionProviderRepresentation>> RequiredActionsAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RequiredActionProviderRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RequiredActionProviderRepresentation> RequiredActionsGETAsync(string alias, string realm)
        {
            return RequiredActionsGETAsync(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequiredActionProviderRepresentation> RequiredActionsGETAsync(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequiredActionProviderRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RequiredActionsPUTAsync(string alias, RequiredActionProviderRepresentation body, string realm)
        {
            return RequiredActionsPUTAsync(alias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RequiredActionsPUTAsync(string alias, RequiredActionProviderRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RequiredActionsDELETEAsync(string alias, string realm)
        {
            return RequiredActionsDELETEAsync(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RequiredActionsDELETEAsync(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RequiredActionConfigRepresentation> ConfigGET3Async(string alias, string realm)
        {
            return ConfigGET3Async(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequiredActionConfigRepresentation> ConfigGET3Async(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequiredActionConfigRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigPUT2Async(string alias, RequiredActionConfigRepresentation body, string realm)
        {
            return ConfigPUT2Async(alias, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigPUT2Async(string alias, RequiredActionConfigRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigDELETE2Async(string alias, string realm)
        {
            return ConfigDELETE2Async(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigDELETE2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get RequiredAction provider configuration description
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RequiredActionConfigInfoRepresentation> ConfigDescription2Async(string alias, string realm)
        {
            return ConfigDescription2Async(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get RequiredAction provider configuration description
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequiredActionConfigInfoRepresentation> ConfigDescription2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/config-description"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config-description");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequiredActionConfigInfoRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lower required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LowerPriority2Async(string alias, string realm)
        {
            return LowerPriority2Async(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lower required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LowerPriority2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lower-priority");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Raise required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RaisePriority2Async(string alias, string realm)
        {
            return RaisePriority2Async(alias, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Raise required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RaisePriority2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/required-actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/raise-priority");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get unregistered required actions Returns a stream of unregistered required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> UnregisteredRequiredActionsAsync(string realm)
        {
            return UnregisteredRequiredActionsAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get unregistered required actions Returns a stream of unregistered required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> UnregisteredRequiredActionsAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/authentication/unregistered-required-actions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authentication/unregistered-required-actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientRepresentation> ClientDescriptionConverterAsync(string body, string realm)
        {
            return ClientDescriptionConverterAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientRepresentation> ClientDescriptionConverterAsync(string body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-description-converter"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-description-converter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientPoliciesRepresentation> PoliciesGETAsync(bool? include_global_policies, string realm)
        {
            return PoliciesGETAsync(include_global_policies, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientPoliciesRepresentation> PoliciesGETAsync(bool? include_global_policies, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-policies/policies"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-policies/policies");
                    urlBuilder_.Append('?');
                    if (include_global_policies != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include-global-policies")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_global_policies, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientPoliciesRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PoliciesPUTAsync(ClientPoliciesRepresentation body, string realm)
        {
            return PoliciesPUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PoliciesPUTAsync(ClientPoliciesRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-policies/policies"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-policies/policies");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientProfilesRepresentation> ProfilesGETAsync(bool? include_global_profiles, string realm)
        {
            return ProfilesGETAsync(include_global_profiles, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientProfilesRepresentation> ProfilesGETAsync(bool? include_global_profiles, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-policies/profiles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-policies/profiles");
                    urlBuilder_.Append('?');
                    if (include_global_profiles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include-global-profiles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_global_profiles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientProfilesRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ProfilesPUTAsync(ClientProfilesRepresentation body, string realm)
        {
            return ProfilesPUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ProfilesPUTAsync(ClientProfilesRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-policies/profiles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-policies/profiles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Base path for retrieve providers with the configProperties properly filled
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> ProvidersAllAsync(string realm)
        {
            return ProvidersAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Base path for retrieve providers with the configProperties properly filled
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> ProvidersAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-registration-policy/providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-registration-policy/providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ComponentTypeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientScopesAllAsync(string realm)
        {
            return ClientScopesAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientScopesPOSTAsync(ClientScopeRepresentation body, string realm)
        {
            return ClientScopesPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientScopesPOSTAsync(ClientScopeRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientScopeRepresentation> ClientScopesGETAsync(string realm, string client_scope_id)
        {
            return ClientScopesGETAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientScopeRepresentation> ClientScopesGETAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientScopeRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientScopesPUTAsync(ClientScopeRepresentation body, string realm, string client_scope_id)
        {
            return ClientScopesPUTAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientScopesPUTAsync(ClientScopeRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientScopesDELETEAsync(string realm, string client_scope_id)
        {
            return ClientScopesDELETEAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientScopesDELETEAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddModelsAsync(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_scope_id)
        {
            return AddModelsAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddModelsAsync(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/add-models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/add-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAllAsync(string realm, string client_scope_id)
        {
            return ModelsAllAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAllAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPOSTAsync(ProtocolMapperRepresentation body, string realm, string client_scope_id)
        {
            return ModelsPOSTAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPOSTAsync(ProtocolMapperRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGETAsync(string id, string realm, string client_scope_id)
        {
            return ModelsGETAsync(id, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGETAsync(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProtocolMapperRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPUTAsync(string id, ProtocolMapperRepresentation body, string realm, string client_scope_id)
        {
            return ModelsPUTAsync(id, body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPUTAsync(string id, ProtocolMapperRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsDELETEAsync(string id, string realm, string client_scope_id)
        {
            return ModelsDELETEAsync(id, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsDELETEAsync(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ProtocolAsync(string protocol, string realm, string client_scope_id)
        {
            return ProtocolAsync(protocol, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ProtocolAsync(string protocol, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (protocol == null)
                throw new System.ArgumentNullException("protocol");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/protocol/{protocol}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/protocol/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(protocol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappingsAsync(string realm, string client_scope_id)
        {
            return ScopeMappingsAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappingsAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappingsRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAllAsync(string realm, string client_scope_id, string client)
        {
            return ClientsAllAsync(realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAllAsync(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOSTAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client)
        {
            return ClientsPOSTAsync(body, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOSTAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETEAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client)
        {
            return ClientsDELETEAsync(body, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETEAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> AvailableAsync(string realm, string client_scope_id, string client)
        {
            return AvailableAsync(realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> AvailableAsync(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositeAsync(bool? briefRepresentation, string realm, string client_scope_id, string client)
        {
            return CompositeAsync(briefRepresentation, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositeAsync(bool? briefRepresentation, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAllAsync(string realm, string client_scope_id)
        {
            return RealmAllAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAllAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmPOSTAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id)
        {
            return RealmPOSTAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmPOSTAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmDELETEAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id)
        {
            return RealmDELETEAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmDELETEAsync(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available2Async(string realm, string client_scope_id)
        {
            return Available2Async(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite2Async(bool? briefRepresentation, string realm, string client_scope_id)
        {
            return Composite2Async(briefRepresentation, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite2Async(bool? briefRepresentation, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client session stats Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> ClientSessionStatsAsync(string realm)
        {
            return ClientSessionStatsAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client session stats Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> ClientSessionStatsAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-session-stats"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-session-stats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientTemplatesAllAsync(string realm)
        {
            return ClientTemplatesAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientTemplatesAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientTemplatesPOSTAsync(ClientScopeRepresentation body, string realm)
        {
            return ClientTemplatesPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientTemplatesPOSTAsync(ClientScopeRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientScopeRepresentation> ClientTemplatesGETAsync(string realm, string client_scope_id)
        {
            return ClientTemplatesGETAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientScopeRepresentation> ClientTemplatesGETAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientScopeRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientTemplatesPUTAsync(ClientScopeRepresentation body, string realm, string client_scope_id)
        {
            return ClientTemplatesPUTAsync(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientTemplatesPUTAsync(ClientScopeRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientTemplatesDELETEAsync(string realm, string client_scope_id)
        {
            return ClientTemplatesDELETEAsync(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientTemplatesDELETEAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddModels2Async(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_scope_id)
        {
            return AddModels2Async(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddModels2Async(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/add-models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/add-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll2Async(string realm, string client_scope_id)
        {
            return ModelsAll2Async(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPOST2Async(ProtocolMapperRepresentation body, string realm, string client_scope_id)
        {
            return ModelsPOST2Async(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPOST2Async(ProtocolMapperRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET2Async(string id, string realm, string client_scope_id)
        {
            return ModelsGET2Async(id, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET2Async(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProtocolMapperRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPUT2Async(string id, ProtocolMapperRepresentation body, string realm, string client_scope_id)
        {
            return ModelsPUT2Async(id, body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPUT2Async(string id, ProtocolMapperRepresentation body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsDELETE2Async(string id, string realm, string client_scope_id)
        {
            return ModelsDELETE2Async(id, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsDELETE2Async(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol2Async(string protocol, string realm, string client_scope_id)
        {
            return Protocol2Async(protocol, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol2Async(string protocol, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (protocol == null)
                throw new System.ArgumentNullException("protocol");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/protocol/{protocol}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/protocol/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(protocol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings2Async(string realm, string client_scope_id)
        {
            return ScopeMappings2Async(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappingsRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll2Async(string realm, string client_scope_id, string client)
        {
            return ClientsAll2Async(realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll2Async(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOST2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client)
        {
            return ClientsPOST2Async(body, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOST2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETE2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client)
        {
            return ClientsDELETE2Async(body, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETE2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available3Async(string realm, string client_scope_id, string client)
        {
            return Available3Async(realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available3Async(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite3Async(bool? briefRepresentation, string realm, string client_scope_id, string client)
        {
            return Composite3Async(briefRepresentation, realm, client_scope_id, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite3Async(bool? briefRepresentation, string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll2Async(string realm, string client_scope_id)
        {
            return RealmAll2Async(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmPOST2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id)
        {
            return RealmPOST2Async(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmPOST2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmDELETE2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id)
        {
            return RealmDELETE2Async(body, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmDELETE2Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available4Async(string realm, string client_scope_id)
        {
            return Available4Async(realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available4Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite4Async(bool? briefRepresentation, string realm, string client_scope_id)
        {
            return Composite4Async(briefRepresentation, realm, client_scope_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite4Async(bool? briefRepresentation, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_scope_id == null)
                throw new System.ArgumentNullException("client_scope_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all client types available in the current realm
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of both global and realm level client types and the attributes they set
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientTypesRepresentation> ClientTypesGETAsync(string realm)
        {
            return ClientTypesGETAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all client types available in the current realm
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of both global and realm level client types and the attributes they set
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientTypesRepresentation> ClientTypesGETAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientTypesRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a client type
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a realm level client type
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientTypesPUTAsync(ClientTypesRepresentation body, string realm)
        {
            return ClientTypesPUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a client type
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a realm level client type
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientTypesPUTAsync(ClientTypesRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/client-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get clients belonging to the realm.
        /// </summary>
        /// <remarks>
        /// If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
        /// </remarks>
        /// <param name="clientId">filter by clientId</param>
        /// <param name="first">the first result</param>
        /// <param name="max">the max results to return</param>
        /// <param name="search">whether this is a search query or a getClientById query</param>
        /// <param name="viewableOnly">filter clients that cannot be viewed in full by admin</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientRepresentation>> ClientsAll3Async(string clientId, int? first, int? max, string q, bool? search, bool? viewableOnly, string realm)
        {
            return ClientsAll3Async(clientId, first, max, q, search, viewableOnly, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get clients belonging to the realm.
        /// </summary>
        /// <remarks>
        /// If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
        /// </remarks>
        /// <param name="clientId">filter by clientId</param>
        /// <param name="first">the first result</param>
        /// <param name="max">the max results to return</param>
        /// <param name="search">whether this is a search query or a getClientById query</param>
        /// <param name="viewableOnly">filter clients that cannot be viewed in full by admin</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientRepresentation>> ClientsAll3Async(string clientId, int? first, int? max, string q, bool? search, bool? viewableOnly, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients");
                    urlBuilder_.Append('?');
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (viewableOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("viewableOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(viewableOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new client Client’s client_id must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOST3Async(ClientRepresentation body, string realm)
        {
            return ClientsPOST3Async(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client Client’s client_id must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOST3Async(ClientRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientInitialAccessPresentation>> ClientsInitialAccessAllAsync(string realm)
        {
            return ClientsInitialAccessAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientInitialAccessPresentation>> ClientsInitialAccessAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients-initial-access"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients-initial-access");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientInitialAccessPresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new initial access token.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientInitialAccessCreatePresentation> ClientsInitialAccessPOSTAsync(ClientInitialAccessCreatePresentation body, string realm)
        {
            return ClientsInitialAccessPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new initial access token.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientInitialAccessCreatePresentation> ClientsInitialAccessPOSTAsync(ClientInitialAccessCreatePresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients-initial-access"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients-initial-access");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientInitialAccessCreatePresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsInitialAccessDELETEAsync(string id, string realm)
        {
            return ClientsInitialAccessDELETEAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsInitialAccessDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients-initial-access/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients-initial-access/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get representation of the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientRepresentation> ClientsGETAsync(string realm, string client_uuid)
        {
            return ClientsGETAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientRepresentation> ClientsGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPUTAsync(ClientRepresentation body, string realm, string client_uuid)
        {
            return ClientsPUTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPUTAsync(ClientRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETE3Async(string realm, string client_uuid)
        {
            return ClientsDELETE3Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETE3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceServerRepresentation> ResourceServerGETAsync(string realm, string client_uuid)
        {
            return ResourceServerGETAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceServerRepresentation> ResourceServerGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceServerRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResourceServerPUTAsync(ResourceServerRepresentation body, string realm, string client_uuid)
        {
            return ResourceServerPUTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResourceServerPUTAsync(ResourceServerRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ImportAsync(ResourceServerRepresentation body, string realm, string client_uuid)
        {
            return ImportAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImportAsync(ResourceServerRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/import"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PermissionAllAsync(string fields, int? first, int? max, string name, string owner, bool? permission, string policyId, string resource, string resourceType, string scope, string type, string realm, string client_uuid)
        {
            return PermissionAllAsync(fields, first, max, name, owner, permission, policyId, resource, resourceType, scope, type, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PermissionAllAsync(string fields, int? first, int? max, string name, string owner, bool? permission, string policyId, string resource, string resourceType, string scope, string type, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/permission");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (permission != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("permission")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(permission, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (policyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("policyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PermissionAsync(string body, string realm, string client_uuid)
        {
            return PermissionAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PermissionAsync(string body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/permission");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PolicyEvaluationResponse> EvaluateAsync(PolicyEvaluationRequest body, string realm, string client_uuid)
        {
            return EvaluateAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyEvaluationResponse> EvaluateAsync(PolicyEvaluationRequest body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/evaluate"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/permission/evaluate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyEvaluationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll2Async(string realm, string client_uuid)
        {
            return ProvidersAll2Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll2Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/permission/providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PolicyProviderRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AbstractPolicyRepresentation> SearchAsync(string fields, string name, string realm, string client_uuid)
        {
            return SearchAsync(fields, name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AbstractPolicyRepresentation> SearchAsync(string fields, string name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/search"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/permission/search");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AbstractPolicyRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PolicyAllAsync(string fields, int? first, int? max, string name, string owner, bool? permission, string policyId, string resource, string resourceType, string scope, string type, string realm, string client_uuid)
        {
            return PolicyAllAsync(fields, first, max, name, owner, permission, policyId, resource, resourceType, scope, type, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PolicyAllAsync(string fields, int? first, int? max, string name, string owner, bool? permission, string policyId, string resource, string resourceType, string scope, string type, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/policy");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (permission != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("permission")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(permission, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (policyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("policyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PolicyAsync(string body, string realm, string client_uuid)
        {
            return PolicyAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PolicyAsync(string body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/policy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PolicyEvaluationResponse> Evaluate2Async(PolicyEvaluationRequest body, string realm, string client_uuid)
        {
            return Evaluate2Async(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyEvaluationResponse> Evaluate2Async(PolicyEvaluationRequest body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/evaluate"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/policy/evaluate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyEvaluationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll3Async(string realm, string client_uuid)
        {
            return ProvidersAll3Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/policy/providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PolicyProviderRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AbstractPolicyRepresentation> Search2Async(string fields, string name, string realm, string client_uuid)
        {
            return Search2Async(fields, name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AbstractPolicyRepresentation> Search2Async(string fields, string name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/search"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/policy/search");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AbstractPolicyRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourceAllAsync(string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, string realm, string client_uuid)
        {
            return ResourceAllAsync(_id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourceAllAsync(string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource");
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceRepresentation> ResourcePOSTAsync(ResourceRepresentation body, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return ResourcePOSTAsync(body, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRepresentation> ResourcePOSTAsync(ResourceRepresentation body, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource");
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceRepresentation> Search3Async(string name, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string owner, string scope, string type, string uri)
        {
            return Search3Async(name, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRepresentation> Search3Async(string name, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/search"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/search");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceRepresentation> ResourceGETAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return ResourceGETAsync(resource_id, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRepresentation> ResourceGETAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResourcePUTAsync(string resource_id, ResourceRepresentation body, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return ResourcePUTAsync(resource_id, body, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResourcePUTAsync(string resource_id, ResourceRepresentation body, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResourceDELETEAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return ResourceDELETEAsync(resource_id, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResourceDELETEAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return AttributesAsync(resource_id, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/attributes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes");
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAllAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return PermissionsAllAsync(resource_id, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAllAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PolicyRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopesAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri)
        {
            return ScopesAsync(resource_id, realm, client_uuid, _id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopesAsync(string resource_id, string realm, string client_uuid, string _id, bool? deep, bool? exactName, int? first, bool? matchingUri, int? max, string name, string owner, string scope, string type, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/resource/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scopes");
                    urlBuilder_.Append('?');
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deep != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deep")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deep, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchingUri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchingUri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchingUri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopeAllAsync(int? first, int? max, string name, string scopeId, string realm, string client_uuid)
        {
            return ScopeAllAsync(first, max, name, scopeId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopeAllAsync(int? first, int? max, string name, string scopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope");
                    urlBuilder_.Append('?');
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scopeId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scopeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scopeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ScopePOSTAsync(ScopeRepresentation body, string realm, string client_uuid)
        {
            return ScopePOSTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ScopePOSTAsync(ScopeRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> SearchAllAsync(string name, string realm, string client_uuid)
        {
            return SearchAllAsync(name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> SearchAllAsync(string name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/search"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/search");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScopeRepresentation> ScopeGETAsync(string scope_id, string realm, string client_uuid)
        {
            return ScopeGETAsync(scope_id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScopeRepresentation> ScopeGETAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (scope_id == null)
                throw new System.ArgumentNullException("scope_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScopeRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ScopePUTAsync(string scope_id, ScopeRepresentation body, string realm, string client_uuid)
        {
            return ScopePUTAsync(scope_id, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ScopePUTAsync(string scope_id, ScopeRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (scope_id == null)
                throw new System.ArgumentNullException("scope_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ScopeDELETEAsync(string scope_id, string realm, string client_uuid)
        {
            return ScopeDELETEAsync(scope_id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ScopeDELETEAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (scope_id == null)
                throw new System.ArgumentNullException("scope_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scope_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAll2Async(string scope_id, string realm, string client_uuid)
        {
            return PermissionsAll2Async(scope_id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAll2Async(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (scope_id == null)
                throw new System.ArgumentNullException("scope_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PolicyRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourcesAsync(string scope_id, string realm, string client_uuid)
        {
            return ResourcesAsync(scope_id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourcesAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (scope_id == null)
                throw new System.ArgumentNullException("scope_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/resources"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/scope/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scope_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceServerRepresentation> SettingsAsync(string realm, string client_uuid)
        {
            return SettingsAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceServerRepresentation> SettingsAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/settings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/authz/resource-server/settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceServerRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get key info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CertificateRepresentation> CertificatesAsync(string realm, string client_uuid, string attr)
        {
            return CertificatesAsync(realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get key info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateRepresentation> CertificatesAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> DownloadAsync(KeyStoreConfig body, string realm, string client_uuid, string attr)
        {
            return DownloadAsync(body, realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> DownloadAsync(KeyStoreConfig body, string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/download"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CertificateRepresentation> GenerateAsync(string realm, string client_uuid, string attr)
        {
            return GenerateAsync(realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateRepresentation> GenerateAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/generate"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/generate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file
        /// <br/>
        /// <br/>Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// <br/>Only generated public certificate is saved in Keycloak DB - the private key is not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GenerateAndDownloadAsync(KeyStoreConfig body, string realm, string client_uuid, string attr)
        {
            return GenerateAndDownloadAsync(body, realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file
        /// <br/>
        /// <br/>Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// <br/>Only generated public certificate is saved in Keycloak DB - the private key is not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GenerateAndDownloadAsync(KeyStoreConfig body, string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/generate-and-download"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/generate-and-download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CertificateRepresentation> UploadAsync(string realm, string client_uuid, string attr)
        {
            return UploadAsync(realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateRepresentation> UploadAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/upload"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/upload");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CertificateRepresentation> UploadCertificateAsync(string realm, string client_uuid, string attr)
        {
            return UploadCertificateAsync(realm, client_uuid, attr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateRepresentation> UploadCertificateAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (attr == null)
                throw new System.ArgumentNullException("attr");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/upload-certificate"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attr, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/upload-certificate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretGETAsync(string realm, string client_uuid)
        {
            return ClientSecretGETAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/client-secret"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-secret");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CredentialRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a new secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretPOSTAsync(string realm, string client_uuid)
        {
            return ClientSecretPOSTAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretPOSTAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/client-secret"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-secret");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CredentialRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the rotated client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CredentialRepresentation> RotatedGETAsync(string realm, string client_uuid)
        {
            return RotatedGETAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the rotated client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CredentialRepresentation> RotatedGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-secret/rotated");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CredentialRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invalidate the rotated secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RotatedDELETEAsync(string realm, string client_uuid)
        {
            return RotatedDELETEAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalidate the rotated secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RotatedDELETEAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/client-secret/rotated");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get default client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultClientScopesAllAsync(string realm, string client_uuid)
        {
            return DefaultClientScopesAllAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultClientScopesAllAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/default-client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid)
        {
            return DefaultClientScopesPUTAsync(clientScopeId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid)
        {
            return DefaultClientScopesDELETEAsync(clientScopeId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create JSON with payload of example access token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessToken> GenerateExampleAccessTokenAsync(string audience, string scope, string userId, string realm, string client_uuid)
        {
            return GenerateExampleAccessTokenAsync(audience, scope, userId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example access token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessToken> GenerateExampleAccessTokenAsync(string audience, string scope, string userId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-access-token"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/generate-example-access-token");
                    urlBuilder_.Append('?');
                    if (audience != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("audience")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(audience, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create JSON with payload of example id token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IDToken> GenerateExampleIdTokenAsync(string audience, string scope, string userId, string realm, string client_uuid)
        {
            return GenerateExampleIdTokenAsync(audience, scope, userId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example id token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IDToken> GenerateExampleIdTokenAsync(string audience, string scope, string userId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-id-token"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/generate-example-id-token");
                    urlBuilder_.Append('?');
                    if (audience != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("audience")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(audience, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IDToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create JSON with payload of example user info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GenerateExampleUserinfoAsync(string scope, string userId, string realm, string client_uuid)
        {
            return GenerateExampleUserinfoAsync(scope, userId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example user info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GenerateExampleUserinfoAsync(string scope, string userId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-userinfo"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/generate-example-userinfo");
                    urlBuilder_.Append('?');
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
        /// </summary>
        /// <remarks>
        /// This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperEvaluationRepresentation>> ProtocolMappersAsync(string scope, string realm, string client_uuid)
        {
            return ProtocolMappersAsync(scope, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
        /// </summary>
        /// <remarks>
        /// This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperEvaluationRepresentation>> ProtocolMappersAsync(string scope, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/protocol-mappers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/protocol-mappers");
                    urlBuilder_.Append('?');
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperEvaluationRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> GrantedAsync(string realm, string client_uuid, string roleContainerId, string scope)
        {
            return GrantedAsync(realm, client_uuid, roleContainerId, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> GrantedAsync(string realm, string client_uuid, string roleContainerId, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (roleContainerId == null)
                throw new System.ArgumentNullException("roleContainerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/scope-mappings/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(roleContainerId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/granted");
                    urlBuilder_.Append('?');
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> NotGrantedAsync(string realm, string client_uuid, string roleContainerId, string scope)
        {
            return NotGrantedAsync(realm, client_uuid, roleContainerId, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> NotGrantedAsync(string realm, string client_uuid, string roleContainerId, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (roleContainerId == null)
                throw new System.ArgumentNullException("roleContainerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/evaluate-scopes/scope-mappings/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(roleContainerId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/not-granted");
                    urlBuilder_.Append('?');
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ProvidersAsync(string providerId, string realm, string client_uuid)
        {
            return ProvidersAsync(providerId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ProvidersAsync(string providerId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/installation/providers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGETAsync(string realm, string client_uuid)
        {
            return PermissionsGETAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUTAsync(ManagementPermissionReference body, string realm, string client_uuid)
        {
            return PermissionsPUTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUTAsync(ManagementPermissionReference body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task NodesPOSTAsync(System.Collections.Generic.IDictionary<string, string> body, string realm, string client_uuid)
        {
            return NodesPOSTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task NodesPOSTAsync(System.Collections.Generic.IDictionary<string, string> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/nodes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/nodes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unregister a cluster node from the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task NodesDELETEAsync(string node, string realm, string client_uuid)
        {
            return NodesDELETEAsync(node, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unregister a cluster node from the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task NodesDELETEAsync(string node, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (node == null)
                throw new System.ArgumentNullException("node");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/nodes/{node}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/nodes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(node, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> OfflineSessionCountAsync(string realm, string client_uuid)
        {
            return OfflineSessionCountAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> OfflineSessionCountAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/offline-session-count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offline-session-count");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, long>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get offline sessions for client Returns a list of offline user sessions associated with this client
        /// </summary>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessionsAsync(int? first, int? max, string realm, string client_uuid)
        {
            return OfflineSessionsAsync(first, max, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get offline sessions for client Returns a list of offline user sessions associated with this client
        /// </summary>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessionsAsync(int? first, int? max, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/offline-sessions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offline-sessions");
                    urlBuilder_.Append('?');
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSessionRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get optional client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> OptionalClientScopesAllAsync(string realm, string client_uuid)
        {
            return OptionalClientScopesAllAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get optional client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> OptionalClientScopesAllAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/optional-client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OptionalClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid)
        {
            return OptionalClientScopesPUTAsync(clientScopeId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OptionalClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/optional-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OptionalClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid)
        {
            return OptionalClientScopesDELETEAsync(clientScopeId, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OptionalClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/optional-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddModels3Async(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_uuid)
        {
            return AddModels3Async(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddModels3Async(System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/add-models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/add-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll3Async(string realm, string client_uuid)
        {
            return ModelsAll3Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPOST3Async(ProtocolMapperRepresentation body, string realm, string client_uuid)
        {
            return ModelsPOST3Async(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPOST3Async(ProtocolMapperRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET3Async(string id, string realm, string client_uuid)
        {
            return ModelsGET3Async(id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET3Async(string id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProtocolMapperRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsPUT3Async(string id, ProtocolMapperRepresentation body, string realm, string client_uuid)
        {
            return ModelsPUT3Async(id, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsPUT3Async(string id, ProtocolMapperRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ModelsDELETE3Async(string id, string realm, string client_uuid)
        {
            return ModelsDELETE3Async(id, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ModelsDELETE3Async(string id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol3Async(string protocol, string realm, string client_uuid)
        {
            return Protocol3Async(protocol, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol3Async(string protocol, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (protocol == null)
                throw new System.ArgumentNullException("protocol");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/protocol/{protocol}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/protocol-mappers/protocol/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(protocol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GlobalRequestResult> PushRevocationAsync(string realm, string client_uuid)
        {
            return PushRevocationAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GlobalRequestResult> PushRevocationAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/push-revocation"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/push-revocation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalRequestResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a new registration access token for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ClientRepresentation> RegistrationAccessTokenAsync(string realm, string client_uuid)
        {
            return RegistrationAccessTokenAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new registration access token for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClientRepresentation> RegistrationAccessTokenAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/registration-access-token"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/registration-access-token");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAllAsync(bool? briefRepresentation, int? first, int? max, string search, string realm, string client_uuid)
        {
            return RolesAllAsync(briefRepresentation, first, max, search, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAllAsync(bool? briefRepresentation, int? first, int? max, string search, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesPOSTAsync(RoleRepresentation body, string realm, string client_uuid)
        {
            return RolesPOSTAsync(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesPOSTAsync(RoleRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleRepresentation> RolesGETAsync(string role_name, string realm, string client_uuid)
        {
            return RolesGETAsync(role_name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRepresentation> RolesGETAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesPUTAsync(string role_name, RoleRepresentation body, string realm, string client_uuid)
        {
            return RolesPUTAsync(role_name, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesPUTAsync(string role_name, RoleRepresentation body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesDELETEAsync(string role_name, string realm, string client_uuid)
        {
            return RolesDELETEAsync(role_name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesDELETEAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAllAsync(string role_name, string realm, string client_uuid)
        {
            return CompositesAllAsync(role_name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAllAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesPOSTAsync(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid)
        {
            return CompositesPOSTAsync(role_name, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesPOSTAsync(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesDELETEAsync(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid)
        {
            return CompositesDELETEAsync(role_name, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesDELETEAsync(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll4Async(string client_uuid, string role_name, string realm)
        {
            return ClientsAll4Async(client_uuid, role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll4Async(string client_uuid, string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/clients/{client-uuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll3Async(string role_name, string realm, string client_uuid)
        {
            return RealmAll3Async(role_name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll3Async(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> GroupsAllAsync(string role_name, bool? briefRepresentation, int? first, int? max, string realm, string client_uuid)
        {
            return GroupsAllAsync(role_name, briefRepresentation, first, max, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> GroupsAllAsync(string role_name, bool? briefRepresentation, int? first, int? max, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET2Async(string role_name, string realm, string client_uuid)
        {
            return PermissionsGET2Async(role_name, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET2Async(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT2Async(string role_name, ManagementPermissionReference body, string realm, string client_uuid)
        {
            return PermissionsPUT2Async(role_name, body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT2Async(string role_name, ManagementPermissionReference body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAllAsync(string role_name, bool? briefRepresentation, int? first, int? max, string realm, string client_uuid)
        {
            return UsersAllAsync(role_name, briefRepresentation, first, max, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAllAsync(string role_name, bool? briefRepresentation, int? first, int? max, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/users"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings3Async(string realm, string client_uuid)
        {
            return ScopeMappings3Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappingsRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll5Async(string realm, string client_uuid, string client)
        {
            return ClientsAll5Async(realm, client_uuid, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll5Async(string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOST4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, string client)
        {
            return ClientsPOST4Async(body, realm, client_uuid, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOST4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETE4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, string client)
        {
            return ClientsDELETE4Async(body, realm, client_uuid, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETE4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available5Async(string realm, string client_uuid, string client)
        {
            return Available5Async(realm, client_uuid, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available5Async(string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite5Async(bool? briefRepresentation, string realm, string client_uuid, string client)
        {
            return Composite5Async(briefRepresentation, realm, client_uuid, client, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite5Async(bool? briefRepresentation, string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (client == null)
                throw new System.ArgumentNullException("client");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll4Async(string realm, string client_uuid)
        {
            return RealmAll4Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll4Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmPOST3Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid)
        {
            return RealmPOST3Async(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmPOST3Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmDELETE3Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid)
        {
            return RealmDELETE3Async(body, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmDELETE3Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available6Async(string realm, string client_uuid)
        {
            return Available6Async(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available6Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite6Async(bool? briefRepresentation, string realm, string client_uuid)
        {
            return Composite6Async(briefRepresentation, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite6Async(bool? briefRepresentation, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scope-mappings/realm/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a user dedicated to the service account
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserRepresentation> ServiceAccountUserAsync(string realm, string client_uuid)
        {
            return ServiceAccountUserAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user dedicated to the service account
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRepresentation> ServiceAccountUserAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/service-account-user"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/service-account-user");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get application session count Returns a number of user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> SessionCountAsync(string realm, string client_uuid)
        {
            return SessionCountAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application session count Returns a number of user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> SessionCountAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/session-count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/session-count");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, long>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GlobalRequestResult> TestNodesAvailableAsync(string realm, string client_uuid)
        {
            return TestNodesAvailableAsync(realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GlobalRequestResult> TestNodesAvailableAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/test-nodes-available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/test-nodes-available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalRequestResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get user sessions for client Returns a list of user sessions associated with this client
        /// </summary>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> UserSessionsAsync(int? first, int? max, string realm, string client_uuid)
        {
            return UserSessionsAsync(first, max, realm, client_uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user sessions for client Returns a list of user sessions associated with this client
        /// </summary>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> UserSessionsAsync(int? first, int? max, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/clients/{client-uuid}/user-sessions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user-sessions");
                    urlBuilder_.Append('?');
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSessionRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentRepresentation>> ComponentsAllAsync(string name, string parent, string type, string realm)
        {
            return ComponentsAllAsync(name, parent, type, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentRepresentation>> ComponentsAllAsync(string name, string parent, string type, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (parent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("parent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(parent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ComponentRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ComponentsPOSTAsync(ComponentRepresentation body, string realm)
        {
            return ComponentsPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ComponentsPOSTAsync(ComponentRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ComponentRepresentation> ComponentsGETAsync(string id, string realm)
        {
            return ComponentsGETAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ComponentRepresentation> ComponentsGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComponentRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ComponentsPUTAsync(string id, ComponentRepresentation body, string realm)
        {
            return ComponentsPUTAsync(id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ComponentsPUTAsync(string id, ComponentRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ComponentsDELETEAsync(string id, string realm)
        {
            return ComponentsDELETEAsync(id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ComponentsDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List of subcomponent types that are available to configure for a particular parent component.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> SubComponentTypesAsync(string id, string type, string realm)
        {
            return SubComponentTypesAsync(id, type, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List of subcomponent types that are available to configure for a particular parent component.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> SubComponentTypesAsync(string id, string type, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/components/{id}/sub-component-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/components/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sub-component-types");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ComponentTypeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CredentialRegistratorsAsync(string realm)
        {
            return CredentialRegistratorsAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CredentialRegistratorsAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/credential-registrators"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credential-registrators");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm default client scopes. Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultDefaultClientScopesAllAsync(string realm)
        {
            return DefaultDefaultClientScopesAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm default client scopes. Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultDefaultClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-default-client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-default-client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultDefaultClientScopesPUTAsync(string clientScopeId, string realm)
        {
            return DefaultDefaultClientScopesPUTAsync(clientScopeId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultDefaultClientScopesPUTAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-default-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-default-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultDefaultClientScopesDELETEAsync(string clientScopeId, string realm)
        {
            return DefaultDefaultClientScopesDELETEAsync(clientScopeId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultDefaultClientScopesDELETEAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-default-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-default-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get group hierarchy.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> DefaultGroupsAllAsync(string realm)
        {
            return DefaultGroupsAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group hierarchy.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> DefaultGroupsAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-groups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultGroupsPUTAsync(string groupId, string realm)
        {
            return DefaultGroupsPUTAsync(groupId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultGroupsPUTAsync(string groupId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-groups/{groupId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultGroupsDELETEAsync(string groupId, string realm)
        {
            return DefaultGroupsDELETEAsync(groupId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultGroupsDELETEAsync(string groupId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-groups/{groupId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm optional client scopes. Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultOptionalClientScopesAllAsync(string realm)
        {
            return DefaultOptionalClientScopesAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm optional client scopes. Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultOptionalClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-optional-client-scopes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-optional-client-scopes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientScopeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultOptionalClientScopesPUTAsync(string clientScopeId, string realm)
        {
            return DefaultOptionalClientScopesPUTAsync(clientScopeId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultOptionalClientScopesPUTAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-optional-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefaultOptionalClientScopesDELETEAsync(string clientScopeId, string realm)
        {
            return DefaultOptionalClientScopesDELETEAsync(clientScopeId, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefaultOptionalClientScopesDELETEAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (clientScopeId == null)
                throw new System.ArgumentNullException("clientScopeId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-optional-client-scopes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientScopeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get events Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <param name="client">App or oauth client name</param>
        /// <param name="dateFrom">From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="dateTo">To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="direction">The direction to sort events by (asc or desc)</param>
        /// <param name="first">Paging offset</param>
        /// <param name="ipAddress">IP Address</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="type">The types of events to return</param>
        /// <param name="user">User id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRepresentation>> EventsAllAsync(string client, string dateFrom, string dateTo, string direction, int? first, string ipAddress, int? max, System.Collections.Generic.IEnumerable<string> type, string user, string realm)
        {
            return EventsAllAsync(client, dateFrom, dateTo, direction, first, ipAddress, max, type, user, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get events Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <param name="client">App or oauth client name</param>
        /// <param name="dateFrom">From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="dateTo">To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)</param>
        /// <param name="direction">The direction to sort events by (asc or desc)</param>
        /// <param name="first">Paging offset</param>
        /// <param name="ipAddress">IP Address</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="type">The types of events to return</param>
        /// <param name="user">User id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRepresentation>> EventsAllAsync(string client, string dateFrom, string dateTo, string direction, int? first, string ipAddress, int? max, System.Collections.Generic.IEnumerable<string> type, string user, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/events"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/events");
                    urlBuilder_.Append('?');
                    if (client != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateTo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateTo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (direction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("direction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ipAddress != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ipAddress")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ipAddress, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (user != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("user")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(user, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EventsAsync(string realm)
        {
            return EventsAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EventsAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/events"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/events");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the events provider configuration Returns JSON object with events provider configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RealmEventsConfigRepresentation> ConfigGET4Async(string realm)
        {
            return ConfigGET4Async(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the events provider configuration Returns JSON object with events provider configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RealmEventsConfigRepresentation> ConfigGET4Async(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/events/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/events/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RealmEventsConfigRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update the events provider Change the events provider and/or its configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConfigPUT3Async(RealmEventsConfigRepresentation body, string realm)
        {
            return ConfigPUT3Async(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update the events provider Change the events provider and/or its configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConfigPUT3Async(RealmEventsConfigRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/events/config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/events/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GroupRepresentation> GroupByPathAsync(string path, string realm)
        {
            return GroupByPathAsync(path, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRepresentation> GroupByPathAsync(string path, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (path == null)
                throw new System.ArgumentNullException("path");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/group-by-path/{path}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/group-by-path/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
        /// </summary>
        /// <param name="subGroupsCount">Boolean which defines whether to return the count of subgroups for each group (default: true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll2Async(bool? briefRepresentation, bool? exact, int? first, int? max, bool? populateHierarchy, string q, string search, bool? subGroupsCount, string realm)
        {
            return GroupsAll2Async(briefRepresentation, exact, first, max, populateHierarchy, q, search, subGroupsCount, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
        /// </summary>
        /// <param name="subGroupsCount">Boolean which defines whether to return the count of subgroups for each group (default: true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll2Async(bool? briefRepresentation, bool? exact, int? first, int? max, bool? populateHierarchy, string q, string search, bool? subGroupsCount, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (populateHierarchy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("populateHierarchy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(populateHierarchy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subGroupsCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subGroupsCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subGroupsCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create or add a top level realm groupSet or create child.
        /// </summary>
        /// <remarks>
        /// This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GroupsPOSTAsync(GroupRepresentation body, string realm)
        {
            return GroupsPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create or add a top level realm groupSet or create child.
        /// </summary>
        /// <remarks>
        /// This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GroupsPOSTAsync(GroupRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the groups counts.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> CountAsync(string search, bool? top, string realm)
        {
            return CountAsync(search, top, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the groups counts.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> CountAsync(string search, bool? top, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/count");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, long>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GroupRepresentation> GroupsGETAsync(string realm, string group_id)
        {
            return GroupsGETAsync(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRepresentation> GroupsGETAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update group, ignores subgroups.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GroupsPUTAsync(GroupRepresentation body, string realm, string group_id)
        {
            return GroupsPUTAsync(body, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update group, ignores subgroups.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GroupsPUTAsync(GroupRepresentation body, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GroupsDELETEAsync(string realm, string group_id)
        {
            return GroupsDELETEAsync(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GroupsDELETEAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief groups representations are returned or not (default: false)</param>
        /// <param name="exact">Boolean which defines whether the params "search" must match exactly or not</param>
        /// <param name="first">The position of the first result to be returned (pagination offset).</param>
        /// <param name="max">The maximum number of results that are to be returned. Defaults to 10</param>
        /// <param name="search">A String representing either an exact group name or a partial name</param>
        /// <param name="subGroupsCount">Boolean which defines whether to return the count of subgroups for each subgroup of this group (default: true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> ChildrenAllAsync(bool? briefRepresentation, bool? exact, int? first, int? max, string search, bool? subGroupsCount, string realm, string group_id)
        {
            return ChildrenAllAsync(briefRepresentation, exact, first, max, search, subGroupsCount, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief groups representations are returned or not (default: false)</param>
        /// <param name="exact">Boolean which defines whether the params "search" must match exactly or not</param>
        /// <param name="first">The position of the first result to be returned (pagination offset).</param>
        /// <param name="max">The maximum number of results that are to be returned. Defaults to 10</param>
        /// <param name="search">A String representing either an exact group name or a partial name</param>
        /// <param name="subGroupsCount">Boolean which defines whether to return the count of subgroups for each subgroup of this group (default: true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> ChildrenAllAsync(bool? briefRepresentation, bool? exact, int? first, int? max, string search, bool? subGroupsCount, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/children"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/children");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subGroupsCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subGroupsCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subGroupsCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set or create child.
        /// </summary>
        /// <remarks>
        /// This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ChildrenAsync(GroupRepresentation body, string realm, string group_id)
        {
            return ChildrenAsync(body, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set or create child.
        /// </summary>
        /// <remarks>
        /// This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChildrenAsync(GroupRepresentation body, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/children"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/children");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET3Async(string realm, string group_id)
        {
            return PermissionsGET3Async(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET3Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT3Async(ManagementPermissionReference body, string realm, string group_id)
        {
            return PermissionsPUT3Async(body, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT3Async(ManagementPermissionReference body, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters
        /// </summary>
        /// <param name="briefRepresentation">Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> MembersAllAsync(bool? briefRepresentation, int? first, int? max, string realm, string group_id)
        {
            return MembersAllAsync(briefRepresentation, first, max, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters
        /// </summary>
        /// <param name="briefRepresentation">Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> MembersAllAsync(bool? briefRepresentation, int? first, int? max, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/members"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MappingsRepresentation> RoleMappingsAsync(string realm, string group_id)
        {
            return RoleMappingsAsync(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappingsRepresentation> RoleMappingsAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappingsRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll6Async(string realm, string group_id, string client_id)
        {
            return ClientsAll6Async(realm, group_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll6Async(string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOST5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, string client_id)
        {
            return ClientsPOST5Async(body, realm, group_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOST5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETE5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, string client_id)
        {
            return ClientsDELETE5Async(body, realm, group_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETE5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available7Async(string realm, string group_id, string client_id)
        {
            return Available7Async(realm, group_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available7Async(string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite7Async(bool? briefRepresentation, string realm, string group_id, string client_id)
        {
            return Composite7Async(briefRepresentation, realm, group_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite7Async(bool? briefRepresentation, string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll5Async(string realm, string group_id)
        {
            return RealmAll5Async(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll5Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmPOST4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id)
        {
            return RealmPOST4Async(body, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmPOST4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmDELETE4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id)
        {
            return RealmDELETE4Async(body, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmDELETE4Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available8Async(string realm, string group_id)
        {
            return Available8Async(realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available8Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/realm/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite8Async(bool? briefRepresentation, string realm, string group_id)
        {
            return Composite8Async(briefRepresentation, realm, group_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite8Async(bool? briefRepresentation, string realm, string group_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (group_id == null)
                throw new System.ArgumentNullException("group_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/groups/{group-id}/role-mappings/realm/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import identity provider from JSON body
        /// </summary>
        /// <remarks>
        /// Import identity provider from uploaded JSON file
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> ImportConfigAsync(System.Collections.Generic.IDictionary<string, object> body, string realm)
        {
            return ImportConfigAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import identity provider from JSON body
        /// </summary>
        /// <remarks>
        /// Import identity provider from uploaded JSON file
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> ImportConfigAsync(System.Collections.Generic.IDictionary<string, object> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/import-config"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/import-config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List identity providers
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realmOnly">Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)</param>
        /// <param name="search">Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact ("name"). Default prefixed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> InstancesAllAsync(bool? briefRepresentation, int? first, int? max, bool? realmOnly, string search, string realm)
        {
            return InstancesAllAsync(briefRepresentation, first, max, realmOnly, search, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List identity providers
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realmOnly">Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)</param>
        /// <param name="search">Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact ("name"). Default prefixed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> InstancesAllAsync(bool? briefRepresentation, int? first, int? max, bool? realmOnly, string search, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (realmOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("realmOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(realmOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IdentityProviderRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InstancesPOSTAsync(IdentityProviderRepresentation body, string realm)
        {
            return InstancesPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InstancesPOSTAsync(IdentityProviderRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityProviderRepresentation> InstancesGETAsync(string realm, string alias)
        {
            return InstancesGETAsync(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityProviderRepresentation> InstancesGETAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityProviderRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InstancesPUTAsync(IdentityProviderRepresentation body, string realm, string alias)
        {
            return InstancesPUTAsync(body, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InstancesPUTAsync(IdentityProviderRepresentation body, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InstancesDELETEAsync(string realm, string alias)
        {
            return InstancesDELETEAsync(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InstancesDELETEAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Export public broker configuration for identity provider
        /// </summary>
        /// <param name="format">Format to use</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExportAsync(string format, string realm, string alias)
        {
            return ExportAsync(format, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export public broker configuration for identity provider
        /// </summary>
        /// <param name="format">Format to use</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExportAsync(string format, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/export"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/export");
                    urlBuilder_.Append('?');
                    if (format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET4Async(string realm, string alias)
        {
            return PermissionsGET4Async(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET4Async(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT4Async(ManagementPermissionReference body, string realm, string alias)
        {
            return PermissionsPUT4Async(body, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT4Async(ManagementPermissionReference body, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mapper types for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, IdentityProviderMapperTypeRepresentation>> MapperTypesAsync(string realm, string alias)
        {
            return MapperTypesAsync(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper types for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, IdentityProviderMapperTypeRepresentation>> MapperTypesAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mapper-types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, IdentityProviderMapperTypeRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mappers for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderMapperRepresentation>> MappersAllAsync(string realm, string alias)
        {
            return MappersAllAsync(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderMapperRepresentation>> MappersAllAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mappers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IdentityProviderMapperRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a mapper to identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MappersPOSTAsync(IdentityProviderMapperRepresentation body, string realm, string alias)
        {
            return MappersPOSTAsync(body, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a mapper to identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MappersPOSTAsync(IdentityProviderMapperRepresentation body, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mappers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get mapper by id for the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityProviderMapperRepresentation> MappersGETAsync(string id, string realm, string alias)
        {
            return MappersGETAsync(id, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id for the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityProviderMapperRepresentation> MappersGETAsync(string id, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mappers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityProviderMapperRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MappersPUTAsync(string id, IdentityProviderMapperRepresentation body, string realm, string alias)
        {
            return MappersPUTAsync(id, body, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MappersPUTAsync(string id, IdentityProviderMapperRepresentation body, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mappers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MappersDELETEAsync(string id, string realm, string alias)
        {
            return MappersDELETEAsync(id, realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MappersDELETEAsync(string id, string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mappers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reaload keys for the identity provider if the provider supports it, "true" is returned if reload was performed, "false" if not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> ReloadKeysAsync(string realm, string alias)
        {
            return ReloadKeysAsync(realm, alias, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reaload keys for the identity provider if the provider supports it, "true" is returned if reload was performed, "false" if not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> ReloadKeysAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (alias == null)
                throw new System.ArgumentNullException("alias");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reload-keys");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the identity provider factory for that provider id
        /// </summary>
        /// <param name="provider_id">The provider id to get the factory</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Providers2Async(string provider_id, string realm)
        {
            return Providers2Async(provider_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the identity provider factory for that provider id
        /// </summary>
        /// <param name="provider_id">The provider id to get the factory</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Providers2Async(string provider_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (provider_id == null)
                throw new System.ArgumentNullException("provider_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/identity-provider/providers/{provider_id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-provider/providers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(provider_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<KeysMetadataRepresentation> KeysAsync(string realm)
        {
            return KeysAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<KeysMetadataRepresentation> KeysAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/keys"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeysMetadataRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> LocalizationAllAsync(string realm)
        {
            return LocalizationAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> LocalizationAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> LocalizationGETAsync(string locale, bool? useRealmDefaultLocaleFallback, string realm)
        {
            return LocalizationGETAsync(locale, useRealmDefaultLocaleFallback, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> LocalizationGETAsync(string locale, bool? useRealmDefaultLocaleFallback, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (useRealmDefaultLocaleFallback != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useRealmDefaultLocaleFallback")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useRealmDefaultLocaleFallback, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import localization from uploaded JSON file
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LocalizationPOSTAsync(string locale, System.Collections.Generic.IDictionary<string, string> body, string realm)
        {
            return LocalizationPOSTAsync(locale, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import localization from uploaded JSON file
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LocalizationPOSTAsync(string locale, System.Collections.Generic.IDictionary<string, string> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LocalizationDELETEAsync(string locale, string realm)
        {
            return LocalizationDELETEAsync(locale, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LocalizationDELETEAsync(string locale, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> LocalizationGET2Async(string key, string locale, string realm)
        {
            return LocalizationGET2Async(key, locale, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> LocalizationGET2Async(string key, string locale, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}/{key}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LocalizationPUTAsync(string key, string locale, string body, string realm)
        {
            return LocalizationPUTAsync(key, locale, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LocalizationPUTAsync(string key, string locale, string body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}/{key}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LocalizationDELETE2Async(string key, string locale, string realm)
        {
            return LocalizationDELETE2Async(key, locale, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LocalizationDELETE2Async(string key, string locale, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            if (locale == null)
                throw new System.ArgumentNullException("locale");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/localization/{locale}/{key}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/localization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate any sessions they have.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GlobalRequestResult> LogoutAllAsync(string realm)
        {
            return LogoutAllAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate any sessions they have.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GlobalRequestResult> LogoutAllAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/logout-all"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/logout-all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalRequestResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a paginated list of organizations filtered according to the specified parameters
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned - defaults to 10</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String representing either an organization name or domain</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAllAsync(bool? briefRepresentation, bool? exact, int? first, int? max, string q, string search, string realm)
        {
            return OrganizationsAllAsync(briefRepresentation, exact, first, max, q, search, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a paginated list of organizations filtered according to the specified parameters
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned - defaults to 10</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String representing either an organization name or domain</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAllAsync(bool? briefRepresentation, bool? exact, int? first, int? max, string q, string search, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OrganizationsPOSTAsync(OrganizationRepresentation body, string realm)
        {
            return OrganizationsPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OrganizationsPOSTAsync(OrganizationRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the organizations counts.
        /// </summary>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String representing either an organization name or domain</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> Count2Async(bool? exact, string q, string search, string realm)
        {
            return Count2Async(exact, q, search, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organizations counts.
        /// </summary>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String representing either an organization name or domain</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> Count2Async(bool? exact, string q, string search, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/count");
                    urlBuilder_.Append('?');
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll2Async(string member_id, bool? briefRepresentation, string realm)
        {
            return OrganizationsAll2Async(member_id, briefRepresentation, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll2Async(string member_id, bool? briefRepresentation, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/members/{member-id}/organizations"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the organization representation
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrganizationRepresentation> OrganizationsGETAsync(string realm, string org_id)
        {
            return OrganizationsGETAsync(realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organization representation
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRepresentation> OrganizationsGETAsync(string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OrganizationsPUTAsync(OrganizationRepresentation body, string realm, string org_id)
        {
            return OrganizationsPUTAsync(body, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OrganizationsPUTAsync(OrganizationRepresentation body, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OrganizationsDELETEAsync(string realm, string org_id)
        {
            return OrganizationsDELETEAsync(realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OrganizationsDELETEAsync(string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all identity providers associated with the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> IdentityProvidersAllAsync(string realm, string org_id)
        {
            return IdentityProvidersAllAsync(realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all identity providers associated with the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> IdentityProvidersAllAsync(string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/identity-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IdentityProviderRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds the identity provider with the specified id to the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="body">Payload should contain only id or alias of the identity provider to be associated with the organization (id or alias with or without quotes). Surrounding whitespace characters will be trimmed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task IdentityProvidersPOSTAsync(string body, string realm, string org_id)
        {
            return IdentityProvidersPOSTAsync(body, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the identity provider with the specified id to the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="body">Payload should contain only id or alias of the identity provider to be associated with the organization (id or alias with or without quotes). Surrounding whitespace characters will be trimmed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task IdentityProvidersPOSTAsync(string body, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/identity-providers"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-providers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the identity provider associated with the organization that has the specified alias
        /// </summary>
        /// <remarks>
        /// Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityProviderRepresentation> IdentityProvidersGETAsync(string alias, string realm, string org_id)
        {
            return IdentityProvidersGETAsync(alias, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the identity provider associated with the organization that has the specified alias
        /// </summary>
        /// <remarks>
        /// Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityProviderRepresentation> IdentityProvidersGETAsync(string alias, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-providers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityProviderRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes the identity provider with the specified alias from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task IdentityProvidersDELETEAsync(string alias, string realm, string org_id)
        {
            return IdentityProvidersDELETEAsync(alias, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the identity provider with the specified alias from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task IdentityProvidersDELETEAsync(string alias, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (alias == null)
                throw new System.ArgumentNullException("alias");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/identity-providers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alias, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a paginated list of organization members filtered according to the specified parameters
        /// </summary>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned. Defaults to 10</param>
        /// <param name="membershipType">The membership type</param>
        /// <param name="search">A String representing either a member's username, e-mail, first name, or last name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MemberRepresentation>> MembersAll2Async(bool? exact, int? first, int? max, string membershipType, string search, string realm, string org_id)
        {
            return MembersAll2Async(exact, first, max, membershipType, search, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a paginated list of organization members filtered according to the specified parameters
        /// </summary>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned. Defaults to 10</param>
        /// <param name="membershipType">The membership type</param>
        /// <param name="search">A String representing either a member's username, e-mail, first name, or last name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MemberRepresentation>> MembersAll2Async(bool? exact, int? first, int? max, string membershipType, string search, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members");
                    urlBuilder_.Append('?');
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (membershipType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("membershipType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(membershipType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MemberRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds the user with the specified id as a member of the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="body">Payload should contain only id of the user to be added to the organization (UUID with or without quotes). Surrounding whitespace characters will be trimmed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MembersPOSTAsync(string body, string realm, string org_id)
        {
            return MembersPOSTAsync(body, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the user with the specified id as a member of the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="body">Payload should contain only id of the user to be added to the organization (UUID with or without quotes). Surrounding whitespace characters will be trimmed.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MembersPOSTAsync(string body, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns number of members in the organization.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> Count3Async(string realm, string org_id)
        {
            return Count3Async(realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns number of members in the organization.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> Count3Async(string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/count");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invites an existing user to the organization, using the specified user id
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InviteExistingUserAsync(Body body, string realm, string org_id)
        {
            return InviteExistingUserAsync(body, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invites an existing user to the organization, using the specified user id
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InviteExistingUserAsync(Body body, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/invite-existing-user"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/invite-existing-user");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
        /// </summary>
        /// <remarks>
        /// If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InviteUserAsync(Body2 body, string realm, string org_id)
        {
            return InviteUserAsync(body, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
        /// </summary>
        /// <remarks>
        /// If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InviteUserAsync(Body2 body, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, JsonSerializerSettings);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/invite-user"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/invite-user");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the member of the organization with the specified id
        /// </summary>
        /// <remarks>
        /// Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MemberRepresentation> MembersGETAsync(string member_id, string realm, string org_id)
        {
            return MembersGETAsync(member_id, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the member of the organization with the specified id
        /// </summary>
        /// <remarks>
        /// Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MemberRepresentation> MembersGETAsync(string member_id, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/{member-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MemberRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes the user with the specified id from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MembersDELETEAsync(string member_id, string realm, string org_id)
        {
            return MembersDELETEAsync(member_id, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the user with the specified id from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MembersDELETEAsync(string member_id, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/{member-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll3Async(string member_id, bool? briefRepresentation, string realm, string org_id)
        {
            return OrganizationsAll3Async(member_id, briefRepresentation, realm, org_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="briefRepresentation">if false, return the full representation. Otherwise, only the basic fields are returned.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll3Async(string member_id, bool? briefRepresentation, string realm, string org_id, System.Threading.CancellationToken cancellationToken)
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/organizations/{org-id}/members/{member-id}/organizations"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/organizations");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RealmRepresentation> PartialExportAsync(bool? exportClients, bool? exportGroupsAndRoles, string realm)
        {
            return PartialExportAsync(exportClients, exportGroupsAndRoles, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RealmRepresentation> PartialExportAsync(bool? exportClients, bool? exportGroupsAndRoles, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/partial-export"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/partial-export");
                    urlBuilder_.Append('?');
                    if (exportClients != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exportClients")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exportClients, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exportGroupsAndRoles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exportGroupsAndRoles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exportGroupsAndRoles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RealmRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PartialImportAsync(System.IO.Stream body, string realm)
        {
            return PartialImportAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PartialImportAsync(System.IO.Stream body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/partialImport"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/partialImport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Push the realm's revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GlobalRequestResult> PushRevocation2Async(string realm)
        {
            return PushRevocation2Async(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Push the realm's revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GlobalRequestResult> PushRevocation2Async(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/push-revocation"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/push-revocation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalRequestResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAll2Async(bool? briefRepresentation, int? first, int? max, string search, string realm)
        {
            return RolesAll2Async(briefRepresentation, first, max, search, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAll2Async(bool? briefRepresentation, int? first, int? max, string search, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesPOST2Async(RoleRepresentation body, string realm)
        {
            return RolesPOST2Async(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesPOST2Async(RoleRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a specific role's representation
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleRepresentation> RolesByIdGETAsync(string role_id, string realm)
        {
            return RolesByIdGETAsync(role_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific role's representation
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRepresentation> RolesByIdGETAsync(string role_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesByIdPUTAsync(string role_id, RoleRepresentation body, string realm)
        {
            return RolesByIdPUTAsync(role_id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesByIdPUTAsync(string role_id, RoleRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesByIdDELETEAsync(string role_id, string realm)
        {
            return RolesByIdDELETEAsync(role_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesByIdDELETEAsync(string role_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get role's children Returns a set of role's children provided the role is a composite.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll2Async(string role_id, int? first, int? max, string search, string realm)
        {
            return CompositesAll2Async(role_id, first, max, search, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role's children Returns a set of role's children provided the role is a composite.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll2Async(string role_id, int? first, int? max, string search, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");
                    urlBuilder_.Append('?');
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Make the role a composite role by associating some child roles
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesPOST2Async(string role_id, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm)
        {
            return CompositesPOST2Async(role_id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Make the role a composite role by associating some child roles
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesPOST2Async(string role_id, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a set of roles from the role's composite
        /// </summary>
        /// <param name="role_id">Role id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesDELETE2Async(string role_id, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm)
        {
            return CompositesDELETE2Async(role_id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of roles from the role's composite
        /// </summary>
        /// <param name="role_id">Role id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesDELETE2Async(string role_id, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll7Async(string clientUuid, string role_id, string realm)
        {
            return ClientsAll7Async(clientUuid, role_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll7Async(string clientUuid, string role_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (clientUuid == null)
                throw new System.ArgumentNullException("clientUuid");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientUuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll6Async(string role_id, string realm)
        {
            return RealmAll6Async(role_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll6Async(string role_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/composites/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET5Async(string role_id, string realm)
        {
            return PermissionsGET5Async(role_id, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET5Async(string role_id, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT5Async(string role_id, ManagementPermissionReference body, string realm)
        {
            return PermissionsPUT5Async(role_id, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT5Async(string role_id, ManagementPermissionReference body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles-by-id/{role-id}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleRepresentation> RolesGET2Async(string role_name, string realm)
        {
            return RolesGET2Async(role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRepresentation> RolesGET2Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesPUT2Async(string role_name, RoleRepresentation body, string realm)
        {
            return RolesPUT2Async(role_name, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesPUT2Async(string role_name, RoleRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RolesDELETE2Async(string role_name, string realm)
        {
            return RolesDELETE2Async(role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RolesDELETE2Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll3Async(string role_name, string realm)
        {
            return CompositesAll3Async(role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll3Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesPOST3Async(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm)
        {
            return CompositesPOST3Async(role_name, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesPOST3Async(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CompositesDELETE3Async(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm)
        {
            return CompositesDELETE3Async(role_name, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CompositesDELETE3Async(string role_name, System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/composites"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll8Async(string client_uuid, string role_name, string realm)
        {
            return ClientsAll8Async(client_uuid, role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll8Async(string client_uuid, string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (client_uuid == null)
                throw new System.ArgumentNullException("client_uuid");

            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/composites/clients/{client-uuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_uuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll7Async(string role_name, string realm)
        {
            return RealmAll7Async(role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll7Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/composites/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composites/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> GroupsAll3Async(string role_name, bool? briefRepresentation, int? first, int? max, string realm)
        {
            return GroupsAll3Async(role_name, briefRepresentation, first, max, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> GroupsAll3Async(string role_name, bool? briefRepresentation, int? first, int? max, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET6Async(string role_name, string realm)
        {
            return PermissionsGET6Async(role_name, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET6Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT6Async(string role_name, ManagementPermissionReference body, string realm)
        {
            return PermissionsPUT6Async(role_name, body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT6Async(string role_name, ManagementPermissionReference body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/management/permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/management/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll2Async(string role_name, bool? briefRepresentation, int? first, int? max, string realm)
        {
            return UsersAll2Async(role_name, briefRepresentation, first, max, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll2Async(string role_name, bool? briefRepresentation, int? first, int? max, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (role_name == null)
                throw new System.ArgumentNullException("role_name");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/roles/{role-name}/users"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate this particular session.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SessionsAsync(string session, bool? isOffline, string realm)
        {
            return SessionsAsync(session, isOffline, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate this particular session.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SessionsAsync(string session, bool? isOffline, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (session == null)
                throw new System.ArgumentNullException("session");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/sessions/{session}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sessions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(session, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (isOffline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isOffline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isOffline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test SMTP connection with current logged in user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task TestSMTPConnectionAsync(System.Collections.Generic.IDictionary<string, string> body, string realm)
        {
            return TestSMTPConnectionAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test SMTP connection with current logged in user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task TestSMTPConnectionAsync(System.Collections.Generic.IDictionary<string, string> body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/testSMTPConnection"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/testSMTPConnection");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters.
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="email">A String contained in email, or the complete email, if param "exact" is true</param>
        /// <param name="emailVerified">whether the email has been verified</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="exact">Boolean which defines whether the params "last", "first", "email" and "username" must match exactly</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="firstName">A String contained in firstName, or the complete firstName, if param "exact" is true</param>
        /// <param name="idpAlias">The alias of an Identity Provider linked to the user</param>
        /// <param name="idpUserId">The userId at an Identity Provider linked to the user</param>
        /// <param name="lastName">A String contained in lastName, or the complete lastName, if param "exact" is true</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">A String contained in username, or the complete username, if param "exact" is true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll3Async(bool? briefRepresentation, string email, bool? emailVerified, bool? enabled, bool? exact, int? first, string firstName, string idpAlias, string idpUserId, string lastName, int? max, string q, string search, string username, string realm)
        {
            return UsersAll3Async(briefRepresentation, email, emailVerified, enabled, exact, first, firstName, idpAlias, idpUserId, lastName, max, q, search, username, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters.
        /// </summary>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="email">A String contained in email, or the complete email, if param "exact" is true</param>
        /// <param name="emailVerified">whether the email has been verified</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="exact">Boolean which defines whether the params "last", "first", "email" and "username" must match exactly</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="firstName">A String contained in firstName, or the complete firstName, if param "exact" is true</param>
        /// <param name="idpAlias">The alias of an Identity Provider linked to the user</param>
        /// <param name="idpUserId">The userId at an Identity Provider linked to the user</param>
        /// <param name="lastName">A String contained in lastName, or the complete lastName, if param "exact" is true</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">A String contained in username, or the complete username, if param "exact" is true</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll3Async(bool? briefRepresentation, string email, bool? emailVerified, bool? enabled, bool? exact, int? first, string firstName, string idpAlias, string idpUserId, string lastName, int? max, string q, string search, string username, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (emailVerified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("emailVerified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(emailVerified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (enabled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("enabled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(enabled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (firstName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("firstName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (idpAlias != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("idpAlias")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idpAlias, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (idpUserId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("idpUserId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idpUserId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new user Username must be unique.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersPOSTAsync(UserRepresentation body, string realm)
        {
            return UsersPOSTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new user Username must be unique.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersPOSTAsync(UserRepresentation body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsGETAsync(string realm)
        {
            return UsersManagementPermissionsGETAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsGETAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users-management-permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users-management-permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsPUTAsync(ManagementPermissionReference body, string realm)
        {
            return UsersManagementPermissionsPUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsPUTAsync(ManagementPermissionReference body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users-management-permissions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users-management-permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagementPermissionReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the number of users that match the given criteria.
        /// </summary>
        /// <remarks>
        /// It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
        /// </remarks>
        /// <param name="email">email filter</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="firstName">first name filter</param>
        /// <param name="lastName">last name filter</param>
        /// <param name="search">arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">username filter</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> Count4Async(string email, bool? emailVerified, bool? enabled, string firstName, string lastName, string q, string search, string username, string realm)
        {
            return Count4Async(email, emailVerified, enabled, firstName, lastName, q, search, username, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the number of users that match the given criteria.
        /// </summary>
        /// <remarks>
        /// It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
        /// </remarks>
        /// <param name="email">email filter</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="firstName">first name filter</param>
        /// <param name="lastName">last name filter</param>
        /// <param name="search">arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">username filter</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> Count4Async(string email, bool? emailVerified, bool? enabled, string firstName, string lastName, string q, string search, string username, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/count");
                    urlBuilder_.Append('?');
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (emailVerified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("emailVerified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(emailVerified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (enabled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("enabled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(enabled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (firstName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("firstName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (q != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UPConfig> ProfileGETAsync(string realm)
        {
            return ProfileGETAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UPConfig> ProfileGETAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/profile"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/profile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UPConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Set the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UPConfig> ProfilePUTAsync(UPConfig body, string realm)
        {
            return ProfilePUTAsync(body, realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Set the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UPConfig> ProfilePUTAsync(UPConfig body, string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/profile"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/profile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UPConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get the UserProfileMetadata from the configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserProfileMetadata> MetadataAsync(string realm)
        {
            return MetadataAsync(realm, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the UserProfileMetadata from the configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserProfileMetadata> MetadataAsync(string realm, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/profile/metadata"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/profile/metadata");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfileMetadata>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get representation of the user
        /// </summary>
        /// <param name="userProfileMetadata">Indicates if the user profile metadata should be added to the response</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserRepresentation> UsersGET2Async(bool? userProfileMetadata, string realm, string user_id)
        {
            return UsersGET2Async(userProfileMetadata, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the user
        /// </summary>
        /// <param name="userProfileMetadata">Indicates if the user profile metadata should be added to the response</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRepresentation> UsersGET2Async(bool? userProfileMetadata, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (userProfileMetadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userProfileMetadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userProfileMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersPUTAsync(UserRepresentation body, string realm, string user_id)
        {
            return UsersPUTAsync(body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersPUTAsync(UserRepresentation body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersDELETE3Async(string realm, string user_id)
        {
            return UsersDELETE3Async(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersDELETE3Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return credential types, which are provided by the user storage where user is stored.
        /// </summary>
        /// <remarks>
        /// Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ConfiguredUserStorageCredentialTypesAsync(string realm, string user_id)
        {
            return ConfiguredUserStorageCredentialTypesAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return credential types, which are provided by the user storage where user is stored.
        /// </summary>
        /// <remarks>
        /// Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ConfiguredUserStorageCredentialTypesAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/configured-user-storage-credential-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configured-user-storage-credential-types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get consents granted by the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ConsentsAllAsync(string realm, string user_id)
        {
            return ConsentsAllAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get consents granted by the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ConsentsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/consents"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/consents");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revoke consent and offline tokens for particular client from user
        /// </summary>
        /// <param name="client">Client id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ConsentsAsync(string client, string realm, string user_id)
        {
            return ConsentsAsync(client, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revoke consent and offline tokens for particular client from user
        /// </summary>
        /// <param name="client">Client id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ConsentsAsync(string client, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/consents/{client}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/consents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CredentialRepresentation>> CredentialsAllAsync(string realm, string user_id)
        {
            return CredentialsAllAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CredentialRepresentation>> CredentialsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/credentials"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credentials");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CredentialRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a credential for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CredentialsAsync(string credentialId, string realm, string user_id)
        {
            return CredentialsAsync(credentialId, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a credential for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CredentialsAsync(string credentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (credentialId == null)
                throw new System.ArgumentNullException("credentialId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/credentials/{credentialId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credentials/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(credentialId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Move a credential to a position behind another credential
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="newPreviousCredentialId">The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MoveAfterAsync(string credentialId, string newPreviousCredentialId, string realm, string user_id)
        {
            return MoveAfterAsync(credentialId, newPreviousCredentialId, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a credential to a position behind another credential
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="newPreviousCredentialId">The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MoveAfterAsync(string credentialId, string newPreviousCredentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (credentialId == null)
                throw new System.ArgumentNullException("credentialId");

            if (newPreviousCredentialId == null)
                throw new System.ArgumentNullException("newPreviousCredentialId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credentials/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(credentialId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveAfter/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(newPreviousCredentialId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Move a credential to a first position in the credentials list of the user
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MoveToFirstAsync(string credentialId, string realm, string user_id)
        {
            return MoveToFirstAsync(credentialId, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a credential to a first position in the credentials list of the user
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MoveToFirstAsync(string credentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (credentialId == null)
                throw new System.ArgumentNullException("credentialId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveToFirst"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credentials/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(credentialId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveToFirst");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a credential label for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UserLabelAsync(string credentialId, string body, string realm, string user_id)
        {
            return UserLabelAsync(credentialId, body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a credential label for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UserLabelAsync(string credentialId, string body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (credentialId == null)
                throw new System.ArgumentNullException("credentialId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/userLabel"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/credentials/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(credentialId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/userLabel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable all credentials for a user of a specific type
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DisableCredentialTypesAsync(System.Collections.Generic.IEnumerable<string> body, string realm, string user_id)
        {
            return DisableCredentialTypesAsync(body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable all credentials for a user of a specific type
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DisableCredentialTypesAsync(System.Collections.Generic.IEnumerable<string> body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/disable-credential-types"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/disable-credential-types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send an email to the user with a link they can click to execute particular actions.
        /// </summary>
        /// <remarks>
        /// An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
        /// </remarks>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ExecuteActionsEmailAsync(string client_id, int? lifespan, string redirect_uri, System.Collections.Generic.IEnumerable<string> body, string realm, string user_id)
        {
            return ExecuteActionsEmailAsync(client_id, lifespan, redirect_uri, body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email to the user with a link they can click to execute particular actions.
        /// </summary>
        /// <remarks>
        /// An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
        /// </remarks>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExecuteActionsEmailAsync(string client_id, int? lifespan, string redirect_uri, System.Collections.Generic.IEnumerable<string> body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/execute-actions-email"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/execute-actions-email");
                    urlBuilder_.Append('?');
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lifespan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lifespan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lifespan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get social logins associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FederatedIdentityRepresentation>> FederatedIdentityAllAsync(string realm, string user_id)
        {
            return FederatedIdentityAllAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get social logins associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FederatedIdentityRepresentation>> FederatedIdentityAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/federated-identity"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/federated-identity");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FederatedIdentityRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a social login provider to the user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FederatedIdentityPOSTAsync(string provider, string realm, string user_id)
        {
            return FederatedIdentityPOSTAsync(provider, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a social login provider to the user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FederatedIdentityPOSTAsync(string provider, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (provider == null)
                throw new System.ArgumentNullException("provider");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/federated-identity/{provider}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/federated-identity/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(provider, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Conflict", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a social login provider from user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FederatedIdentityDELETEAsync(string provider, string realm, string user_id)
        {
            return FederatedIdentityDELETEAsync(provider, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a social login provider from user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FederatedIdentityDELETEAsync(string provider, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (provider == null)
                throw new System.ArgumentNullException("provider");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/federated-identity/{provider}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/federated-identity/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(provider, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll4Async(bool? briefRepresentation, int? first, int? max, string search, string realm, string user_id)
        {
            return GroupsAll4Async(briefRepresentation, first, max, search, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll4Async(bool? briefRepresentation, int? first, int? max, string search, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/groups"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> Count5Async(string search, string realm, string user_id)
        {
            return Count5Async(search, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> Count5Async(string search, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/groups/count"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/count");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, long>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GroupsPUT2Async(string groupId, string realm, string user_id)
        {
            return GroupsPUT2Async(groupId, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GroupsPUT2Async(string groupId, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/groups/{groupId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GroupsDELETE2Async(string groupId, string realm, string user_id)
        {
            return GroupsDELETE2Async(groupId, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GroupsDELETE2Async(string groupId, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/groups/{groupId}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Impersonate the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ImpersonationAsync(string realm, string user_id)
        {
            return ImpersonationAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Impersonate the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ImpersonationAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/impersonation"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/impersonation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new KeycloakGeneratedApiException<ErrorRepresentation>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LogoutAsync(string realm, string user_id)
        {
            return LogoutAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LogoutAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/logout"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/logout");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get offline sessions associated with the user and client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessions2Async(string clientUuid, string realm, string user_id)
        {
            return OfflineSessions2Async(clientUuid, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get offline sessions associated with the user and client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessions2Async(string clientUuid, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (clientUuid == null)
                throw new System.ArgumentNullException("clientUuid");

            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/offline-sessions/{clientUuid}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offline-sessions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientUuid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSessionRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set up a new password for the user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResetPasswordAsync(CredentialRepresentation body, string realm, string user_id)
        {
            return ResetPasswordAsync(body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set up a new password for the user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResetPasswordAsync(CredentialRepresentation body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/reset-password"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reset-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send an email to the user with a link they can click to reset their password.
        /// </summary>
        /// <remarks>
        /// The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
        /// </remarks>
        /// <param name="client_id">client id</param>
        /// <param name="redirect_uri">redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task ResetPasswordEmailAsync(string client_id, string redirect_uri, string realm, string user_id)
        {
            return ResetPasswordEmailAsync(client_id, redirect_uri, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email to the user with a link they can click to reset their password.
        /// </summary>
        /// <remarks>
        /// The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
        /// </remarks>
        /// <param name="client_id">client id</param>
        /// <param name="redirect_uri">redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task ResetPasswordEmailAsync(string client_id, string redirect_uri, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/reset-password-email"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reset-password-email");
                    urlBuilder_.Append('?');
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MappingsRepresentation> RoleMappings2Async(string realm, string user_id)
        {
            return RoleMappings2Async(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappingsRepresentation> RoleMappings2Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappingsRepresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll9Async(string realm, string user_id, string client_id)
        {
            return ClientsAll9Async(realm, user_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll9Async(string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsPOST6Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, string client_id)
        {
            return ClientsPOST6Async(body, realm, user_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsPOST6Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClientsDELETE6Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, string client_id)
        {
            return ClientsDELETE6Async(body, realm, user_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClientsDELETE6Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available9Async(string realm, string user_id, string client_id)
        {
            return Available9Async(realm, user_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available9Async(string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite9Async(bool? briefRepresentation, string realm, string user_id, string client_id)
        {
            return Composite9Async(briefRepresentation, realm, user_id, client_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite9Async(bool? briefRepresentation, string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (client_id == null)
                throw new System.ArgumentNullException("client_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/clients/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll8Async(string realm, string user_id)
        {
            return RealmAll8Async(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll8Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmPOST5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id)
        {
            return RealmPOST5Async(body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmPOST5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RealmDELETE5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id)
        {
            return RealmDELETE5Async(body, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RealmDELETE5Async(System.Collections.Generic.IEnumerable<RoleRepresentation> body, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/realm"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available10Async(string realm, string user_id)
        {
            return Available10Async(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available10Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/realm/available"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm/available");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite10Async(bool? briefRepresentation, string realm, string user_id)
        {
            return Composite10Async(briefRepresentation, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite10Async(bool? briefRepresentation, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/role-mappings/realm/composite"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role-mappings/realm/composite");
                    urlBuilder_.Append('?');
                    if (briefRepresentation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("briefRepresentation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(briefRepresentation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send an email-verification email to the user An email contains a link the user can click to verify their email address.
        /// </summary>
        /// <remarks>
        /// The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
        /// </remarks>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SendVerifyEmailAsync(string client_id, int? lifespan, string redirect_uri, string realm, string user_id)
        {
            return SendVerifyEmailAsync(client_id, lifespan, redirect_uri, realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email-verification email to the user An email contains a link the user can click to verify their email address.
        /// </summary>
        /// <remarks>
        /// The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
        /// </remarks>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SendVerifyEmailAsync(string client_id, int? lifespan, string redirect_uri, string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/send-verify-email"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/send-verify-email");
                    urlBuilder_.Append('?');
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lifespan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lifespan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lifespan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get sessions associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> SessionsAllAsync(string realm, string user_id)
        {
            return SessionsAllAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sessions associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> SessionsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/sessions"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sessions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSessionRepresentation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>> UnmanagedAttributesAsync(string realm, string user_id)
        {
            return UnmanagedAttributesAsync(realm, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>> UnmanagedAttributesAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (realm == null)
                throw new System.ArgumentNullException("realm");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/realms/{realm}/users/{user-id}/unmanagedAttributes"
                    urlBuilder_.Append("admin/realms/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(realm, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/unmanagedAttributes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KeycloakGeneratedApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KeycloakGeneratedApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new KeycloakGeneratedApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new KeycloakGeneratedApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625